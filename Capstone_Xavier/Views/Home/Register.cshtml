@model Capstone_Xavier.Models.RegisterModel

@{
    ViewData["Title"] = "Register";
}
<div class="row" style="margin-top: 2%;">
    <div class="col-md-4 ml-md-auto d-flex justify-content-center">
        <h2>@ViewData["Title"]</h2>
    </div>
    <div class="col-md-4" id="menu-button-style">
        <div class="row">
            <div class="row">
                <div class="nav-side2" id="user-menu-button">
                    <div class="dropdown">
                        <button onclick="dropDown()" class="dropBtn">More</button>
                        <div id="myDropdown" class="dropdown-item">
                            <a onclick="location.href='@Url.Action("Index", "Home")'"> Home</a>
                            <a onclick="location.href='@Url.Action("Login", "Home")'"> Login</a>
                            <a onclick="location.href='@Url.Action("FAQS", "Home")'"> FAQS</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row justify-content-center" id="content">
    @using (Html.BeginForm("Register", "Home", FormMethod.Post, new { id="register-form" }))
   
    { @*@using (Ajax.BeginForm("Register", "Home", new AjaxOptions { HttpMethod = "Post", OnSuccess = "OnSuccess" }, new { id = "register-form" }))*@ 


        <div class="input-list">
            <div class="input">
                <label>Username</label>
                <div id="usernamebox">
                    @Html.EditorFor(RegisterModel => RegisterModel.username, new { htmlAttributes = new {  @class = "form-control", @placeholder = "Enter First Name" } })
                </div>
                @Html.ValidationMessageFor(RegisterModel => RegisterModel.username, null, new { @id = "usernameval", @class = "validation" })
            </div>
            <br>
            <div class="input">
                <label>Password</label>

                <div id="passwordbox">
                    @Html.EditorFor(RegisterModel => RegisterModel.password, new { htmlAttributes = new { @id = "PasswordBox", @class = "form-control", @type = "password", @placeholder = "Enter Password." } })
                </div>
                <div class="show-password-group">
                    <input type="checkbox" id="passwordshow" value="show" onclick="ShowPassword('PasswordBox')">
                    <label for="passwordshow" class="show-password-label" @*style="display: inline-block; "*@> Show Password </label> <br />
                </div>
                <div class="row" style="margin-left: 0px;">
                    @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(RegisterModel => RegisterModel.password, "", new { @id = "passwordval", @class = "validation" }).ToHtmlString()))
                </div>
                @*@onload = "setNoPadding()"*@
            </div>
            <br>
            <div class="input">
                <label>Email</label>
                <div id="emailbox">
                    @Html.EditorFor(RegisterModel => RegisterModel.email, new { htmlAttributes = new { @type = "text", @class = "form-control", @placeholder = "Enter Email" } })
                </div>
                @*<br />*@
                @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(RegisterModel => RegisterModel.email, "", new { @id = "emailval", @class = "validation", @style = "padding: 0; border: 0px solid saddlebrown !important;" }).ToHtmlString()))
                @*@Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(RegisterModel => RegisterModel.email, "", new { @id = "emailval", @class = "validation", @style = "padding: 0; border: 0px solid saddlebrown !important;" }).ToHtmlString()))*@
            </div>
        </div>

        <button class="btn-user" type="submit" @*onclick="Validation()"*@>Submit</button>
        <button class="btn-user" type="reset" onclick="Clearform()">Clear</button>


                }
</div>
<script>
    function Clearform() {
                    var username = document.getElementById("usernamebox");
                    var usernameval = document.getElementById("usernameval");
                    var password = document.getElementById("passwordbox");
                    var passwordval = document.getElementById("passwordval");
                    var email = document.getElementById("emailbox");
                    var emailval = document.getElementById("emailval");
                    console.log(username.innerHTML);
                    if (username.value != null | username.value != "") {
                        username.innerHTML = "<input class='input-validation-error form-control text-box single-line' data-val='true' data-val-maxlength='Username cannot be above 15 characters' data-val-maxlength-max='15' data-val-required='The username field is required.' id='username' name='username' placeholder='Enter First Name' type='text' value=''>";
            @*email.innerHTML =  @Html.EditorFor(RegisterModel => RegisterModel.username, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter First Name" } });*@
            usernameval.innerHTML = "";
        }
        if (password.value != null | password.value != "") {
            password.innerHTML = "<input class='input-validation-error form-control text-box single-line' data-val='true' data-val-length='Password must be at least 8 and no more than 20 characters long.' data-val-length-max='20' data-val-length-min='8' data-val-regex='Invalid Password. Passwords must contain: <br> &amp;ensp; • One or more captial letters <br> &amp;ensp; • One or more lower case letters<br> &amp;ensp; • One or more numbers (0-9)<br> &amp;ensp; • One or more special characters (#, ?, !, @@, $, %, ^, &amp;, *, -, +)' data-val-regex-pattern='^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[#@@$%!?^&amp;*\-+]).*$' data-val-required='Password is required.' id='password' name='password' placeholder='Enter Password.' type='password' value=''>";
            passwordval.innerHTML = "";
        }
        if (email.value != null | email.value != "") {
            email.innerHTML = "<input class='input-validation-error form-control text-box single-line' data-val='true' data-val-regex='Email invlaid. Email must be in the form of: <br> &amp;ensp; • One or more letters <br> &amp;ensp; • @@ <br> &amp;ensp; • One or more letters<br> &amp;ensp; • One period<br> &amp;ensp; • Two or 3 ending letters (i.e. com, co, en, etc.)<br> &amp;ensp;  Example: example@email.com' data-val-regex-pattern='\w+@@[A-z]+\.\w{2,3}$' data-val-required='The email field is required.' id='email' name='email' placeholder='Enter Email' type='text' value=''>";
            emailval.innerHTML = "";
        }
            //console.log(email.value);
        /*username.*/
        /*username.nodeValue = "";*/
        //var form = document.getElementById("register-form");
        //document.getElementById("register-form").reset();
    }
    //function setNoPadding() {
    //    var passwordval = document.getElementById("passwordval");
    //    passwordval.style.display = "none";
    //}a


    //function Validation() {
    //    var emailval = document.getElementById("emailval");
    //    console.log("inner = " + emailval.innerHTML);
    //    //if (emailval.innerHTML != "") {

    //    //}
    //    if (emailval.style.padding == "0px") {
    //        emailval.style.padding = "2px";
    //    }
    //    if (emailval.style.border == "0px solid saddlebrown !important") {
    //        emailval.style.border = "2px solid saddlebrown !important";
    //    }
    //}
    

</script>



