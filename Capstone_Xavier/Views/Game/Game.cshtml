@using Capstone_Xavier.Models
@model GameModel

<!--Row with two columns: First col: game text output (buttons below), Second col: character stats,hidden boxes: merchant,regions to travel, and monster combat, and bag-->
<div class="row">
    <!--The game view. Where text responses are put and buttons can be clicked-->
    <div class="col-md-6 col-sm-12" >
        <div class="row">
            <div class="col-12" style="padding-right:1%">
                <div class="text-UI" id="text-UI" style="width:100%; position:relative;"></div>
            </div>
        </div>
        <div class="row">
            <!--Buttons-->
            <div class="col-12">

                <!--The default buttons. Showed automatically-->
                <div id="defaultBtn" class="btn-block">
                    <button class="btn-user" id="Travel">Travel</button>
                    <button class="btn-user" id="Look" onclick="Travel(0,2)">Look Around</button>
                    <button class="btn-user" onclick="location.href='@Url.Action("Users", "Home")'">Exit</button>
                </div>

                <!--Merchant Buttons. Called on merchant events-->
                <div id="MerchantBtns" class="btn-block" style="display: none;">
                    <button class="btn-user" id="SellClose" style="display: none;" onclick="closeSellBag()">Sell (Close Bag)</button>
                    <button class="btn-user" id="SellOpen" onclick="openSellBag()">Sell (Open Bag)</button>
                    <button class="btn-user" id="btn-merchant" onclick="LeaveMerchant()">Leave Merchant</button>
                </div>


                <!--For combat events only. Shows during monster events-->
                <div id="ComabatBtn" class="btn-block" style="display: none;">
                    <button class="btn-user" onclick="combatAction(0)">Attack</button>
                    <button class="btn-user" onclick="combatAction(1)">Defend</button>
                    <button class="btn-user" onclick="combatAction(2)">Flee</button>
                    <button class="btn-user" onclick="location.href='@Url.Action("Users", "Home")'">Exit</button>
                </div>

                <!--For player death events. Shows only when the healt is less or = to 0-->
                <div id="Lost" class="btn-block" style="display: none;">
                    <button class="btn-user" onclick="location.href='@Url.Action("Users", "Home")'">I accept my fate</button>
                </div>
            </div>
        </div>

    </div>
    <!--The character UI/stats, three hidden boxes (merchant, travel, combat)-->
    <div class="col-md-6 col-sm-12">
        <!--The character UI/stats-->
        <div class="row">
            <div class="col-12" style="padding-left:1%; padding-bottom:1%">
                <div class="info-UI" style="height:fit-content; padding-bottom: 1%;width:100%;position:relative;">
                    <div class="row">
                        <div class="col-md-4 col-sm-12">
                            <div class="row">
                                <div class="col-12">
                                    <h6 style=" display: block; width: 100%; float: left; font-size: x-large; text-align: center">Name: @Model.character.name</h6>
                                </div>
                                <div class="col-12">
                                    <h6 style=" display: block; width: 100%; float: left; font-size: x-large; text-align: center">Class: @Model.character.className</h6>
                                </div>
                                @*<div class="col-7">
                                    <button class="btn-user" style="width: 50%; margin-left: 1vw;" type="submit" onclick="OpenBag()">Bag</button>
                                </div>*@
                            </div>
                        </div>
                        <div class="col-md-8 col-sm-12" >
                            <div class="row">
                                <div class="col-12" style="width:100%;">
                                    <div class="progress" style="height: 2rem;border:2px solid black;">
                                        <div class="progress-bar bg-danger" id="Health" role="progressbar" aria-valuenow="70"
                                             aria-valuemin="0" aria-valuemax="200" style="width:70%;">
                                            <div id="HealthDisplay" style="color:black;">
                                                HP
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row" style="margin-top:2%">
                                <div class="col-6">
                                    <div class="progress" style="height: 2rem;border:2px solid black;">
                                        <div class="progress-bar bg-success" id="Stamina" role="progressbar" aria-valuenow="20"
                                             aria-valuemin="0" aria-valuemax="60" style="width:33%;">
                                            <div id="StaminaDisplay" style="color:black;">
                                                STAMINA
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="progress" style="height: 2rem;border:2px solid black;">
                                        <div class="progress-bar progress-bar-info" id="Magica" role="progressbar" aria-valuenow="10"
                                             aria-valuemin="0" aria-valuemax="60" style="width:15%;">
                                            <div id="MagicaDisplay" style="color:black;">
                                                MAGICA
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-7 col-sm-12">
                            <button class="btn-user" style="width: 50%; margin-left: 1vw;" type="submit" onclick="OpenBag()">Bag</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!--Merchant items or monster (not viewable at the same time, either buying/selling or in combat)-->
        <div class="row">
            <div class="col-12" style="padding-left:1%;">
                <!--For merchant events only. Refreshed every time the event is triggered-->
                <div id="merchant" class="info-box" style="left:55vw; height: 15vw; width:100%; top: 7vw; display: none;"></div>
                <!--Opened and used for a list of available regions to travel to.-->
                <div class="list-bag" id="list-regions" style="width:100%; display: none;">

                    @{
                        foreach (RegionModel region in Model.regions)
                        {
                            <div class="c-info" id="region" value="@region.regionID" style="cursor: pointer;" role="button" onclick="Travel(@region.regionID, 1)">@region.regionName</div>
                        }
                    }

                </div>
                @*--------Monster UI------------------*@
                <div id="MonsterUI" class="info-UI" style="top: 7vw; width:100%; display: none;">
                    <div style="width: 38%; height: 100%;  display:inline-block">
                        <h6 style=" display: block; width: 100%; float: left; font-size: x-large; text-align: center" id="monsterName">Monster name</h6>
                    </div>
                    <div class="container-bar" style="width: 60%;  float: right; vertical-align: middle;">
                        <div class="progress" style="height: 2rem;border:2px solid black;">
                            <div class="progress-bar bg-danger" id="MHealth" role="progressbar" aria-valuenow="200" aria-valuemin="0" aria-valuemax="200" style="width:100%;">
                                <div id="MHealthDisplay" style="color:black;">
                                    HP
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!--Bag-->
        <div class="row">
            <div class="col-md-12 col-sm-12" style="padding-left:1%;">
                <!--The character bag items. Refreshed every time the bag button is clicked.-->
                <div id="Bag-List" class="list-bag" style="bottom: 0;height: 20vw; width:100%; top:28vw; display: none;"></div>
            </div>
        </div>
    </div>

</div>


<script type="text/javascript">
    //For showing the available regions to travel to
    $(document).ready(function () {

        $('#Travel').click(function () {

            var x = document.getElementById("list-regions");
            if (x.style.display === "none") {
                x.style.display = "inline-block";
            } else {
                x.style.display = "none";
            }

        });
    });

    //called on load. used to load character data.
    document.addEventListener("DOMContentLoaded", function () {
        var health = @Html.Raw(Json.Encode(Model.character.health));
        var maxHP = @Html.Raw(Json.Encode(Model.character.maxHP));
        var magica = @Html.Raw(Json.Encode(Model.character.magica));
        var stamina = @Html.Raw(Json.Encode(Model.character.stamina));
        var name = @Html.Raw(Json.Encode(Model.character.name));
        var ob = {
            hp: health,
            maxhp: maxHP,
            Stamina: stamina,
            Magica: magica
        }
        //Set Health progress-bar Health
        var h = document.getElementById("Health");
        h.setAttribute('aria-valuemax', maxHP);
        h.setAttribute('aria-valuenow', health);
        //calculate the health percentage
        let health_percent= (ob.hp / ob.maxhp)*100;
        let health_rounded = Math.round(health_percent);
        let width_string = health_rounded.toString() + "%";
        //set calculated value to progress-bar
        h.style.width = width_string;
        //h = ob.maxhp;
        var display = document.getElementById("HealthDisplay");
        let health_display = health + "/" + maxHP;
        display.innerHTML = health_display;
        //aria-valuenow will be used to know the HP number, not percentage
        //used for setting the stamina bar
        var s = document.getElementById("Stamina");
        s.setAttribute('aria-valuemax', stamina);
        s.setAttribute('aria-valuenow', stamina);
        s.style.width = "100%";
        var sdisplay = document.getElementById("StaminaDisplay");
        let stamina_display = stamina + "/" + stamina;
        sdisplay.innerHTML = stamina_display;

        //used for setting the magica bar
        var m = document.getElementById("Magica");
        m.setAttribute('aria-valuemax', magica);
        m.setAttribute('aria-valuenow', magica);
        m.style.width = "100%";
        var mdisplay = document.getElementById("MagicaDisplay");
        let magica_display = magica + "/" + magica;
        mdisplay.innerHTML = magica_display;
        //m.max = ob.Magica;
        //m.value = ob.Magica;
    });
    //########################/*Misc and UI*/#######################################

    //For decreasing specific bar values based on amount and bar
    function alterBar(increment, element) {
        var pb = document.getElementById(element);
        //used for calculating percentages
        var max_value = parseInt(pb.getAttribute('aria-valuemax'));
        console.log("max health: " + pb.getAttribute('aria-valuemax'));
        //var current_val = parseInt(pb.getAttribute('aria-valuenow'));
        var new_val = parseInt(pb.getAttribute('aria-valuenow')) - parseInt(increment);
        //var i;
        var id = setInterval(animateBardown, 20);
        function animateBardown() {
            if (new_val < 0) {
                pb.setAttribute('aria-valuenow', 0);
                pb.style.width = "0%";
                //change display
                let displayid = element + "Display";
                let display = document.getElementById(displayid);
                let _display = pb.getAttribute('aria-valuenow') + "/" + max_value;
                display.innerHTML = _display;
                clearInterval(id);
            }
            if (parseInt(pb.getAttribute('aria-valuenow')) > new_val) {
                //increment down one
                var current_val = parseInt(pb.getAttribute('aria-valuenow')) - 1;
                //attributes need to be set
                setDisplay(element, current_val, max_value);
                

            }
            else if (parseInt(pb.getAttribute('aria-valuenow')) == new_val) {
                console.log("ClearInterval() called");
                clearInterval(id);
            }
            else {
                console.log("Incrementation did not stop");
                console.log("Current_val:" + parseInt(pb.getAttribute('aria-valuenow')) + ".New_val:" + new_val);//current_val < new_val
                clearInterval(id);
            }
        };
    };

    //For increasing specific bar values based on amount and bar
    function increaseAlterBar(increment, element) {
        console.log("increaseAlterBar() for " + element +" by "+increment);
        var h = document.getElementById(element);
        var new_val = parseInt(h.getAttribute('aria-valuenow')) + parseInt(increment);
        //var i;
        var id = setInterval(animateBarup, 20);
        function animateBarup() {
            if (parseInt(h.getAttribute('aria-valuenow')) == new_val || parseInt(h.getAttribute('aria-valuenow')) == parseInt(h.getAttribute('aria-valuemax'))) {
                console.log("new_val: " + new_val);
                console.log("h.getAttribute('aria-valuenow') " + h.getAttribute('aria-valuenow'));
                console.log("stopped increaseAlterBar()");
                clearInterval(id);
            } else {
                console.log("increaseAlterBar() "+element+" by one");
                let current_value = parseInt(h.getAttribute('aria-valuenow'));
                console.log("before: " + current_value);
                let max_value = h.getAttribute('aria-valuemax');
                let add_one = current_value + 1;
                setDisplay(element, add_one, max_value);
            }
        };
    };

    //############################/*Events*/############################################

    //used for calling c# method on monster and thief events
     function eventAction(regionID, eventID) {

        $.ajax({
            url: "../../Game/EventAction",
            type: "POST",
            data: { regionID: regionID, eventID: eventID },
            cache: false,
            async: true,
            success: function (data) {
                addHTMLToTextUI(data)
            }

        });
        };

    //For calling monsters and starting combat.
    function monsterEvent() {
        $.getJSON("../../Game/GetMonsterValues", function (response) {
            let mName = document.getElementById("monsterName");
            mName.innerHTML = response.monstername;
            /*populateMonster*/
            setDisplay("MHealth", response.monsterHealth, response.monsterHealth);

        })

        let monsterUI = document.getElementById("MonsterUI");
        monsterUI.style.display = "inline-block";

        let combatBtn = document.getElementById("ComabatBtn");
        combatBtn.style.display = "inline-block";

        let defaultBtn = document.getElementById("defaultBtn");
        defaultBtn.style.display = "none";

        let list = document.getElementById("list-regions");
        list.style.display = "none";
        
    };

    function MerchantEvent() {
        //var gold;

        $.getJSON("../../Game/GetMerchantInfo", function (response) {
            //gold = response.gold;
            //console.log("getJSON response.gold: " + response.gold);
            //console.log("getJSON gold: " + gold);
            var merchantBox = document.getElementById("merchant");
            merchantBox.style.display = "inline-block";
            merchantBox.innerHTML = response.itemtext;

            var merchant = document.getElementById("MerchantBtns");
            merchant.style.display = "inline-block";

            var defaultBtn = document.getElementById("defaultBtn");
            defaultBtn.style.display = "none";

            var merchantText = "<br><div style=' width: 10 %; height: auto; display: block; float: left; margin: 3px; padding: 3px; '>After searching the area for a while you come across an old man carrying a large sack on his back. He looks to you with a crookedd smile." +
                "Care to browse my wares? Opening the sack you see a few items. Will you buy? Your purse: <strong>" + response.gold + " gold</strong></div><br>";
            addHTMLToTextUI(merchantText)

        })
        
    }

    function addHTMLToTextUI(html) {
        var elem = document.getElementById("text-UI");
        elem.innerHTML = elem.innerHTML.concat(html);
        elem.scrollTop = elem.scrollHeight;
    }

    //###############################/*Combat Actions*/########################
    function combatAction(actionID) {
        var mHealth = document.getElementById("MHealth").getAttribute('aria-valuenow');
        var health = document.getElementById("Health").getAttribute('aria-valuenow');
        var magica = document.getElementById("Magica").getAttribute('aria-valuenow');
        var stamina = document.getElementById("Stamina").getAttribute('aria-valuenow');

        //For altering the bars and calling possible death events
        $.getJSON("../../Combat/CombatAction", { monsterHealth: mHealth, playerHealth: health, magica: magica, stamina: stamina, actionID: actionID }, function (response) {

            if (response.action === 0) {//Monster or player flee events

                addHTMLToTextUI(response.print)

                //Change the ui back to travel form
                var monsterUI = document.getElementById("MonsterUI");
                monsterUI.style.display = "none";

                var combatBtn = document.getElementById("ComabatBtn");
                combatBtn.style.display = "none";

                var defaultBtn = document.getElementById("defaultBtn");
                defaultBtn.style.display = "inline-block";
                //Call monster flee event
            } else {
                //TODO-make seperate method
                addHTMLToTextUI(response.print)

                //used for altering the player bar
                var playerHBar = document.getElementById("Health");
                console.log("playerHBar:"+playerHBar);
                //var health = document.getElementById("Health").getAttribute('aria-valuenow');
                var playerStamina = document.getElementById("Stamina");
                var playerMagica = document.getElementById("Magica");
                var playerHealth = playerHBar.getAttribute('aria-valuenow');

                var increment = playerHealth - response.playerH;
                if (response.Stamina != null) {
                    var staminaIncrement = stamina - response.Stamina;
                    console.log("Stamina change called: " + staminaIncrement);
                    console.log("stamina - response.Stamina; "+stamina+"-"+response.Stamina);
                    alterBar(staminaIncrement, playerStamina.id);
                }
                if (response.Magica != null) {
                    var magicaIncrememnt = magica - response.Magica;
                    console.log("Magica change called: " + magicaIncrememnt);
                    alterBar(magicaIncrememnt, playerMagica.id);

                }
                console.log("alterBar(" + increment + "," + playerHBar.id + ")");
                alterBar(increment, playerHBar.id);

                //used for altering the mosnterbar
                var monsterHBar = document.getElementById("MHealth");
                var monsterIncrement = parseInt(monsterHBar.getAttribute("aria-valuenow")) - parseInt(response.monsterH);

                if (increment < 0) {
                    increment = (increment - increment) - increment;
                }

                if (monsterIncrement < 0) {
                    monsterIncrement = (monsterIncrement - monsterIncrement) - monsterIncrement;
                }
                console.log("monsterIncrement:" + monsterIncrement);
                console.log("monsterhealth: " + monsterHBar.getAttribute('aria-valuenow'));
                alterBar(monsterIncrement, monsterHBar.id);

                if (monsterIncrement >= monsterHBar.getAttribute("aria-valuenow") || monsterHBar.getAttribute("aria-valuenow") == 0) {

                    monsterDeathEvent(playerHealth - increment);
                }
                if (increment >= playerHBar.getAttribute('aria-valuenow') || playerHBar.getAttribute('aria-valuenow') == 0) {
                    playerDeathEvent();

                }
            }
        })
    };

    function monsterDeathEvent(playerH) {
        //var playerH = document.getElementById("Health");
        $.ajax({
            url: "../../Game/MonsterDeathEvent",
            type: "POST",
            data: { playerHealth: playerH },
            cache: false,
            async: true,
            success: function (data) {
                addHTMLToTextUI(data)

                //Change the ui back to travel form
                var monsterUI = document.getElementById("MonsterUI");
                monsterUI.style.display = "none";

                var combatBtn = document.getElementById("ComabatBtn");
                combatBtn.style.display = "none";

                var defaultBtn = document.getElementById("defaultBtn");
                defaultBtn.style.display = "inline-block";

                //reset monster values
                var monsterHBar = document.getElementById("MHealth");
                monsterHBar.style.width = "100%"
            }
        });
        }

    function playerDeathEvent() {
        $.ajax({
            url: "../../Game/PlayerDeathEvent",
            type: "POST",
            data: {  },
            cache: false,
            async: true,
            success: function (data) {
                addHTMLToTextUI(data);

                //Change the ui back to travel form
                var monsterUI = document.getElementById("MonsterUI");
                monsterUI.style.display = "none";

                var combatBtn = document.getElementById("ComabatBtn");
                combatBtn.style.display = "none";

                var defaultBtn = document.getElementById("defaultBtn");
                defaultBtn.style.display = "none";

                var lostBtn = document.getElementById("Lost");
                lostBtn.style.display = "inline-block";
            }
        });
        }

    //#############################/*Actions*/#################################
    function buy(item, price) {
         $.ajax({
            url: "../../Game/BuyEvent",
            type: "POST",
            data: { itemID: item, itemPrice: price },
            cache: false,
            async: true,
            success: function (data) {
                addHTMLToTextUI(data);
                var bag = document.getElementById("Bag-List");
                if (bag.style.display != "none") {
                    openSellBagScroll();
                }

            }
         });
    }

    function SellItem(item, price) {
        var bag = document.getElementById("Bag-List");
        var sellBtnOpen = document.getElementById("SellOpen");
        var sellBtnClose = document.getElementById("SellClose");
        $.ajax({
            url: "../../Game/SellEvent",
            type: "POST",
            data: { itemID: item, itemPrice: price },
            cache: false,
            async: true,
            success: function (data) {
                addHTMLToTextUI(data);
                console.log(data);
                var bag = document.getElementById("Bag-List");
                if (bag.style.display != "none") {
                    openSellBagScroll();
                    console.log(bag.innerHTML);
                }
            }
        });
    }

    function openSellBag() {
        var bag = document.getElementById("Bag-List");
        var sellBtnOpen = document.getElementById("SellOpen");
        var sellBtnClose = document.getElementById("SellClose");
        $.ajax({
            url: "../../Game/SellInventory",
            type: "Post",
            data: {},
            cache: false,
            async: true,
            success: function (data) {
                bag.innerHTML = data;
                bag.style.display = "inline-block";
                sellBtnOpen.style.display = "none";
                sellBtnClose.style.display = "inline-block";
            }
        });

    }
    function openSellBagScroll() {
        var bag = document.getElementById("Bag-List");
        var sellBtnOpen = document.getElementById("SellOpen");
        var sellBtnClose = document.getElementById("SellClose");
        $.ajax({
            url: "../../Game/SellInventory",
            type: "Post",
            data: {},
            cache: false,
            async: true,
            success: function (data) {
                bag.innerHTML = data;
                bag.style.display = "inline-block";
                sellBtnOpen.style.display = "none";
                sellBtnClose.style.display = "inline-block";
                bag.scrollTop = bag.scrollHeight;
            }
        });
    }

    function closeSellBag() {
        var bag = document.getElementById("Bag-List");
        var sellBtnOpen = document.getElementById("SellOpen");
        var sellBtnClose = document.getElementById("SellClose");

        bag.style.display = "none";
        sellBtnOpen.style.display = "inline-block";
        sellBtnClose.style.display = "none";
    }

    function OpenBag() {
        var elem = document.getElementById("Bag-List");
        var merchant = document.getElementById("merchant");
        var sellBtnOpen = document.getElementById("SellOpen");        
        console.log("first sell open: " + sellBtnOpen.style.display);
        var sellBtnClose = document.getElementById("SellClose");
        console.log("first sell close: " + sellBtnClose.style.display);
        var gold = GetPurse();
        $.ajax({
            url: "../../Game/GetCharacterInventory",
            type: "Post",
            data: {},
            cache: false,
            async: true,
            success: function (data) {                
                elem.innerHTML = "<div style=\"color: #ffbf00; padding-left: 10px; position: absolute;\">Gold: "+ gold +"</div>" + data;
                                if (elem.style.display === "none") { //if the bag is closed
                    elem.style.display = "inline-block"; //display bag
                } else { //if the bag is open
                    if (sellBtnClose.style.display != "none") { //if the sell close bag button is displayed
                        sellBtnClose.style.display = "none"; //hide that button
                        console.log("Sell close: " + sellBtnClose.style.display);
                        if (merchant.style.display != "none") { //if we are at a mercahnt
                            sellBtnOpen.style.display = "inline-block"; //display the sell open bag button
                            console.log("Sell open: " + sellBtnOpen.style.display);
                        }
                    }
                    elem.style.display = "none";
                }
            }
        });
    }

    function GetPurse() {
        var gold;
        $.ajax({
            url: "../../Game/GetMerchantInfo",
            type: "Get",
            data: {},
            cache: false,
            async: false,
            success: function (data) {
                gold = data.gold;                
            }
        });
        return gold;
    }

    function LeaveMerchant() {
        var merchantBtn = document.getElementById("MerchantBtns");
        var defautlBtn = document.getElementById("defaultBtn");
        var merchant = document.getElementById("merchant");
        var bag = document.getElementById("Bag-List");

        defautlBtn.style.display = "inline-block";
        merchantBtn.style.display = "none";
        merchant.style.display = "none";
        closeSellBag();
        bag.style.display = "none";
    }

    //For using Potions or buff items.
    function UseItem(item, itemType) {
        var bar;
        var value;
        var bag = document.getElementById("Bag-List");
        if (itemType === 0) {
            bar = document.getElementById("Health").getAttribute('aria-valuenow');;
            value = bar;
        } else if (itemType === 1) {
            bar = document.getElementById("Stamina").getAttribute('aria-valuenow');
            value = bar;
        } else if (itemType === 2) {
            bar = document.getElementById("Magica").getAttribute('aria-valuenow');
            value = bar;
        }

        $.getJSON("../../User/UseItem", { inventoryID: item, itemType: itemType, bar: value }, function (response) {
            var element;
            if (response.bar === 0) {
                element = "Health";
            } else if (response.bar === 1) {
                element = "Stamina";
            } else {
                element = "Magica";
            }
            increaseAlterBar(response.value, element);
        });
        bag.style.display = "none"; //needs to be opened again, which repopuluates inventory
    }

    //For using weapons and armors
    function UseNonCosumable(item, itemType) {
        $.ajax({
            url: "../../Game/UseNonConsumable",
            type: "POST",
            data: { itemType: itemType, inventoryID: item },
            cache: false,
            async: true,
            success: function (data) {

                var bag = document.getElementById("Bag-List");
                bag.style.display = "none";

                addHTMLToTextUI(data);
            }
        });
    }

    //called whenever the user wants to travel.
    function Travel(regionID, eventID)
    {
        var bag = document.getElementById("Bag-List");
        bag.style.display = "none";
            $.ajax({
                url: "../../Game/DoAction",
                type: "POST",
                data: { action: eventID, regionID: regionID },
                cache: false,
                async: true,
                success: function (data) {
                    if (data === '1' || data === "2" || data === "-1") {
                        eventAction(regionID, data);
                        monsterEvent();
                    } else if (data === "3" ) {
                        MerchantEvent();
                    }
                    else {
                        addHTMLToTextUI(data);
                    }
                }
            })
    };
    function setDisplay(elementid, _new, _max) { //helper function for setting monster bar
        //four elements need to be updated (now, max, width, and display)
        var bar = document.getElementById(elementid);
        bar.setAttribute('aria-valuenow', _new);
        bar.setAttribute('aria-valuemax', _max);
        //correct the width of the progress bar
        //calculate the health percentage
        let health_percent = (parseInt(_new) / parseInt(_max)) * 100;
        let health_rounded = Math.round(health_percent);
        let width_string = health_rounded.toString() + "%";
        //set calculated value to progress-bar
        bar.style.width = width_string;
        //find display id and set it
        var displayid = elementid + "Display";
        var display = document.getElementById(displayid);
        var newdisplay = _new + "/" + _max;
        display.innerHTML = newdisplay;
    }

</script>

